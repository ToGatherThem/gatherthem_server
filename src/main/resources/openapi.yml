openapi: 3.0.0
info:
  title: GatherThem API
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Serveur local de test
paths:
  /user/login:
    post:
      summary: Connexion à l'api
      tags:
        - Utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        '200':    # status code
          description: Résumé de l'utilisateur connecté
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Identifiant incorrect
        '400':
          description: Paramètres fournis invalide
  /user/register:
    post:
      summary: Inscription à gatherthem
      tags:
        - Utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201': # status code
          description: L'utilisateur à bien été créé
        '400':
          description: Paramètres fournis invalide
        '409':
          description: Nom d'utilisateur ou email déjà existant
          content:
            application/json:
              schema:
                type: string
                enum:
                  - "USERNAME_ALREADY_EXIST"
                  - "EMAIL_ALREADY_EXIST"
  /user/me:
    get:
      summary: Consulter son profil utilisateur
      tags:
        - Utilisateur
      responses:
        '200':
          description: Profil de l'utilisateur connecté
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: L'utilisateur n'est pas connecté
  /collections:
    get:
      summary: Consulter ses collections
      tags:
        - Collection
      responses:
        '200':
          description: Liste des collections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
    post:
      summary: Ajout d'une collection
      tags:
        - Collection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionCreationAndUpdate'
      responses:
        '201':
          description: La collection a été créée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
    put:
      summary: Modification d'une collection
      tags:
        - Collection
      parameters:
        - in: query
          name: id
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionCreationAndUpdate'
      responses:
        '200':
          description: La collection a été modifiée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '404':
          description: La collection n'a pas été modifié parce qu'elle n'a pas été trouvé
    delete:
      summary: Supprimer une collection
      tags:
        - Collection
      parameters:
        - in: query
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: La collection a été supprimée
        '404':
          description: La collection n'a pas été trouvée
  /collections/{id}/items:
    get:
      summary: Consulter les items d'une collection
      tags:
        - Collection
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Liste des items d'une collection
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '404':
          description: La collection n'a pas été trouvée

    post:
      summary: Ajout d'un item à une collection
      tags:
        - Collection
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemCreation'
      responses:
        '201':
          description: L'item a été ajouté à la collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: La collection n'a pas été trouvée

  /templates:
    get:
      summary: Consulter les templates accessibles à l'utilisateur connecté
      tags:
        - Template
      responses:
        '200':
          description: Liste des templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Template'

tags:
  - name: Utilisateur
    description: Gestion des utilisateurs
  - name: Collection
    description: Gestion des collections
  - name: Template
    description: Gestion des templates

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/Authority'
    UserCredentials:
      type: object
      properties:
        username:
          type: string
          format: username
        password:
          type: string
          format: password
    UserRegister:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    Authority:
      type: object
      properties:
        code:
          type: string
        name:
          type: string
    Collection:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        creationDate:
          type: string
          format: date-time
    CollectionCreationAndUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    Item:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        creationDate:
          type: string
          format: date-time
        obtentionDate:
          type: string
          format: date-time
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ItemProperty'
    ItemCreation:
      type: object
      properties:
        label:
          type: string
        obtentionDate:
          type: string
          format: date-time
        properties:
          type: array
          items:
            type: object
            properties:
              propertyId:
                type: string
                format: uuid
              value:
                type: string
    ItemUpdate:
      type: object
      properties:
        label:
          type: string
        obtentionDate:
          type: string
          format: date-time
        properties:
          type: array
          items:
            type: object
            properties:
              itemPropertyId:
                type: string
                format: uuid
              value:
                type: string
    ItemProperty:
      type: object
      properties:
        id:
          type: string
          format: uuid
        value:
          type: string
        property:
          $ref: '#/components/schemas/Property'
    Property:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
    Template:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        itemLabelName:
          type: string
        visibility:
          type: string
        parent:
          $ref: '#/components/schemas/Template'
        owner:
          $ref: '#/components/schemas/TemplateOwner'
        properties:
          type: array
          items:
            $ref: '#/components/schemas/Property'
    TemplateOwner:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email